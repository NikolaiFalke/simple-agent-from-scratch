{
  "nodes": [
    {
      "parameters": {
        "description": "Access Symmedia Hub domain knowledge including tenant roles, business rules, and platform details. Use when you need detailed explanations about platform concepts, role capabilities, permissions, or business processes. Input: topic keywords like 'roles', 'permissions', 'business rules', 'platform overview', or specific questions.",
        "jsCode": "// Symmedia Hub Domain Knowledge Base\n// Returns relevant knowledge based on query keywords\n\nconst query = $input.first().json.query?.toLowerCase() || '';\n\n// Core knowledge content\nconst knowledge = {\n  roles: `# Tenant Roles\n\n## SERVICE_PROVIDER\n- Strategic view, full customer management\n- Service organization control\n- Cross-tenant visibility (where permitted)\n- Can create customers, service orgs, invite users\n- Highest authority level\n\n## OPERATOR  \n- Operational view, facility management\n- Limited customer access (operational context)\n- Can manage facilities, execute service cases\n- Middle authority level\n\n## DEVICE_PROVISIONER\n- Technical view, device-focused operations\n- Limited scope to device management\n- Can provision devices, handle technical tasks\n- Lowest authority level\n\n## Hybrid Users\n- Users with multiple roles\n- DEFAULT: Always use SERVICE_PROVIDER context\n- SERVICE_PROVIDER provides broadest access`,\n\n  permissions: `# Permission Matrix\n\n| Operation | SERVICE_PROVIDER | OPERATOR | DEVICE_PROVISIONER |\n|-----------|------------------|----------|-------------------|\n| Customer Management | ✅ Full | ⚠️ Limited | ❌ No |\n| Service Organizations | ✅ Full | ⚠️ View Only | ❌ No |\n| Facilities | ✅ Full | ✅ Full | ⚠️ Device Areas Only |\n| User Invitations | ✅ Full | ⚠️ Limited | ❌ No |\n| Device Management | ✅ Oversight | ⚠️ Operational | ✅ Full Technical |\n\n## Key Rules:\n1. Hybrid users → Default to SERVICE_PROVIDER\n2. Customer creation requires SERVICE_PROVIDER role\n3. Service org creation requires SERVICE_PROVIDER role\n4. User invitations: SERVICE_PROVIDER can invite any role`,\n\n  businessRules: `# Core Business Rules\n\n## Rule 1: Hybrid User Default\nWhen user has multiple roles → Always default to SERVICE_PROVIDER context\n\n## Rule 2: Permission Escalation\nInsufficient permissions → Explain required role + suggest alternatives\n\n## Rule 3: Data Scope by Role\n- SERVICE_PROVIDER: All customers, strategic analytics\n- OPERATOR: Operational customers only, tactical metrics  \n- DEVICE_PROVISIONER: Device-centric data only\n\n## Rule 4: Service Case Context\n- SERVICE_PROVIDER: Create, assign, manage all cases\n- OPERATOR: Execute assigned cases, update status\n- DEVICE_PROVISIONER: Device-specific tasks only\n\n## Rule 5: Customer Management\n- SERVICE_PROVIDER: Full lifecycle management\n- OPERATOR: Operational interaction only\n- DEVICE_PROVISIONER: Limited device context`,\n\n  platform: `# Symmedia Hub Platform Overview\n\n## Architecture\n- Multi-tenant IoT service delivery platform\n- Service Providers manage multiple customers\n- Operators handle operational aspects\n- Device Provisioners manage technical infrastructure\n\n## Key Concepts\n- **Tenant Scoping**: All operations tenant-scoped\n- **Service Organizations**: Group services/customers/resources\n- **Facility Management**: Physical/logical service locations\n- **Role-Based Access**: Hierarchical permissions\n\n## Business Model\nService Provider → Service Organization → Customers → Facilities → Devices\n\n## Data Visibility\n- SERVICE_PROVIDER: Strategic dashboard, cross-customer analytics\n- OPERATOR: Operational dashboard, facility status\n- DEVICE_PROVISIONER: Technical dashboard, device health`\n};\n\n// Determine what knowledge to return based on query\nif (query.includes('role') || query.includes('tenant')) {\n  return knowledge.roles;\n} else if (query.includes('permission') || query.includes('access') || query.includes('can i')) {\n  return knowledge.permissions;\n} else if (query.includes('rule') || query.includes('business') || query.includes('logic')) {\n  return knowledge.businessRules;\n} else if (query.includes('platform') || query.includes('overview') || query.includes('architecture')) {\n  return knowledge.platform;\n} else if (query.includes('all') || query.includes('everything') || query === '') {\n  // Return all knowledge\n  return Object.values(knowledge).join('\\n\\n---\\n\\n');\n} else {\n  // Default: return roles and permissions (most common queries)\n  return knowledge.roles + '\\n\\n---\\n\\n' + knowledge.permissions;\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        -1136,
        128
      ],
      "id": "e7e50fbe-f20a-4d08-8d89-c7c0eb78f856",
      "name": "getDomainKnowledge"
    }
  ],
  "connections": {
    "getDomainKnowledge": {
      "ai_tool": [
        []
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "90f7e16e88b8af51a9fefb468989df8864c6fa45b8b0deeeccb82ce7f608fa65"
  }
}