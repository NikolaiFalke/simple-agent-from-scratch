{
  "nodes": [
    {
      "parameters": {
        "description": "Analyzes machine portfolio performance, IoT connectivity, and operational metrics. Provides comprehensive insights into machine utilization, technology distribution, service contract coverage, and IoT device connectivity across the machine fleet.",
        "jsCode": "// Machine Portfolio Analysis Engine\n// Comprehensive analysis of machine fleet performance and operations\n\nconst customerMachines = $input.first().json.customerMachines || [];\nconst assets = $input.first().json.assets || [];\nconst machineModels = $input.first().json.machineModels || [];\nconst serviceContracts = $input.first().json.serviceContracts || [];\nconst userRole = $input.first().json.userRole || 'SERVICE_PROVIDER';\n\nif (customerMachines.length === 0) {\n  return { error: 'Customer machines data required for portfolio analysis' };\n}\n\n// Portfolio Statistics\nfunction calculatePortfolioStats(machines, assets) {\n  const stats = {\n    totalMachines: machines.length,\n    totalAssets: assets.length,\n    \n    // Status distribution\n    statusDistribution: {},\n    \n    // Technology analysis\n    technologyDistribution: {},\n    brandDistribution: {},\n    \n    // IoT connectivity\n    iotConnectivity: {\n      connectedMachines: 0,\n      unconnectedMachines: 0,\n      connectionRate: 0\n    },\n    \n    // Service contract coverage\n    serviceContractCoverage: {\n      coveredMachines: 0,\n      uncoveredMachines: 0,\n      coverageRate: 0\n    },\n    \n    // Collaboration status\n    collaborationStatus: {},\n    \n    // Warranty analysis\n    warrantyStatus: {\n      activeWarranty: 0,\n      expiredWarranty: 0,\n      noWarrantyInfo: 0\n    }\n  };\n  \n  machines.forEach(machine => {\n    // Status distribution\n    const status = machine.status || 'UNKNOWN';\n    stats.statusDistribution[status] = (stats.statusDistribution[status] || 0) + 1;\n    \n    // Technology and brand analysis\n    const technology = machine.machineModel?.technology || 'Unknown';\n    const brand = machine.machineModel?.brand || 'Unknown';\n    \n    stats.technologyDistribution[technology] = (stats.technologyDistribution[technology] || 0) + 1;\n    stats.brandDistribution[brand] = (stats.brandDistribution[brand] || 0) + 1;\n    \n    // IoT connectivity analysis\n    const hasIoTDevice = !!machine.edgeDevice?.iotDeviceId;\n    if (hasIoTDevice) {\n      stats.iotConnectivity.connectedMachines++;\n    } else {\n      stats.iotConnectivity.unconnectedMachines++;\n    }\n    \n    // Service contract coverage\n    const hasServiceContract = machine.serviceContractAssignments && machine.serviceContractAssignments.length > 0;\n    if (hasServiceContract) {\n      stats.serviceContractCoverage.coveredMachines++;\n    } else {\n      stats.serviceContractCoverage.uncoveredMachines++;\n    }\n    \n    // Collaboration status (from machine object)\n    const collabStatus = machine.machine?.collaborationStatus || 'UNKNOWN';\n    stats.collaborationStatus[collabStatus] = (stats.collaborationStatus[collabStatus] || 0) + 1;\n    \n    // Warranty analysis\n    const now = new Date();\n    if (machine.warrantyBegin && machine.warrantyEnd) {\n      const warrantyEnd = new Date(machine.warrantyEnd);\n      if (warrantyEnd > now) {\n        stats.warrantyStatus.activeWarranty++;\n      } else {\n        stats.warrantyStatus.expiredWarranty++;\n      }\n    } else {\n      stats.warrantyStatus.noWarrantyInfo++;\n    }\n  });\n  \n  // Calculate percentages\n  if (stats.totalMachines > 0) {\n    stats.iotConnectivity.connectionRate = Math.round((stats.iotConnectivity.connectedMachines / stats.totalMachines) * 100);\n    stats.serviceContractCoverage.coverageRate = Math.round((stats.serviceContractCoverage.coveredMachines / stats.totalMachines) * 100);\n  }\n  \n  return stats;\n}\n\n// Role-specific insights generation\nfunction generateRoleInsights(stats, role) {\n  const insights = [];\n  \n  switch (role) {\n    case 'SERVICE_PROVIDER':\n      insights.push('**Strategic Portfolio Insights:**');\n      \n      // IoT connectivity insights\n      if (stats.iotConnectivity.connectionRate < 50) {\n        insights.push(`• IoT adoption opportunity: Only ${stats.iotConnectivity.connectionRate}% connected - consider IoT expansion strategy`);\n      } else {\n        insights.push(`• Strong IoT adoption: ${stats.iotConnectivity.connectionRate}% machines connected`);\n      }\n      \n      // Service contract insights\n      if (stats.serviceContractCoverage.coverageRate < 80) {\n        insights.push(`• Service contract gap: ${100 - stats.serviceContractCoverage.coverageRate}% uncovered machines - revenue opportunity`);\n      } else {\n        insights.push(`• Excellent service coverage: ${stats.serviceContractCoverage.coverageRate}% contract coverage`);\n      }\n      \n      // Technology diversity\n      const techCount = Object.keys(stats.technologyDistribution).length;\n      if (techCount > 5) {\n        insights.push(`• High technology diversity: ${techCount} different technologies - consider specialization`);\n      }\n      \n      break;\n      \n    case 'OPERATOR':\n      insights.push('**Operational Portfolio Insights:**');\n      \n      // Operational efficiency\n      const newMachines = stats.statusDistribution['NEW'] || 0;\n      if (newMachines > stats.totalMachines * 0.2) {\n        insights.push(`• High new machine volume: ${newMachines} machines need commissioning`);\n      }\n      \n      // Technology focus\n      const topTech = Object.entries(stats.technologyDistribution)\n        .sort(([,a], [,b]) => b - a)[0];\n      if (topTech) {\n        insights.push(`• Primary technology focus: ${topTech[0]} (${topTech[1]} machines)`);\n      }\n      \n      break;\n      \n    case 'DEVICE_PROVISIONER':\n      insights.push('**Technical Portfolio Insights:**');\n      \n      // IoT deployment opportunities\n      const unconnected = stats.iotConnectivity.unconnectedMachines;\n      if (unconnected > 0) {\n        insights.push(`• IoT deployment opportunity: ${unconnected} machines ready for edge devices`);\n      }\n      \n      // Collaboration status insights\n      const internal = stats.collaborationStatus['INTERNAL'] || 0;\n      const shared = stats.collaborationStatus['SHARED'] || 0;\n      if (shared > 0) {\n        insights.push(`• Cross-tenant collaboration: ${shared} shared machines require special attention`);\n      }\n      \n      break;\n  }\n  \n  return insights;\n}\n\n// Performance recommendations\nfunction generateRecommendations(stats, role) {\n  const recommendations = [];\n  \n  // Universal recommendations\n  if (stats.iotConnectivity.connectionRate < 70) {\n    recommendations.push('Consider IoT expansion to improve monitoring and predictive maintenance capabilities');\n  }\n  \n  if (stats.serviceContractCoverage.coverageRate < 90) {\n    recommendations.push('Increase service contract coverage to ensure comprehensive support');\n  }\n  \n  // Warranty management\n  if (stats.warrantyStatus.expiredWarranty > 0) {\n    recommendations.push(`Review ${stats.warrantyStatus.expiredWarranty} machines with expired warranties`);\n  }\n  \n  // Role-specific recommendations\n  switch (role) {\n    case 'SERVICE_PROVIDER':\n      if (stats.totalMachines > 100 && stats.iotConnectivity.connectionRate < 60) {\n        recommendations.push('Develop IoT adoption program for large-scale deployment');\n      }\n      break;\n      \n    case 'OPERATOR':\n      const newCount = stats.statusDistribution['NEW'] || 0;\n      if (newCount > 5) {\n        recommendations.push('Prioritize new machine commissioning workflow');\n      }\n      break;\n      \n    case 'DEVICE_PROVISIONER':\n      if (stats.iotConnectivity.unconnectedMachines > 10) {\n        recommendations.push('Plan systematic edge device deployment campaign');\n      }\n      break;\n  }\n  \n  return recommendations;\n}\n\n// Top performers analysis\nfunction identifyTopPerformers(machines) {\n  const performers = {\n    mostConnected: [],\n    bestCovered: [],\n    newestMachines: [],\n    criticalMachines: []\n  };\n  \n  // Most connected (IoT enabled)\n  performers.mostConnected = machines\n    .filter(m => m.edgeDevice?.iotDeviceId)\n    .slice(0, 5)\n    .map(m => ({\n      id: m.id,\n      serialNumber: m.serialNumber,\n      model: `${m.machineModel?.brand || ''} ${m.machineModel?.modelName || ''}`.trim(),\n      iotDeviceId: m.edgeDevice.iotDeviceId\n    }));\n  \n  // Best service coverage\n  performers.bestCovered = machines\n    .filter(m => m.serviceContractAssignments && m.serviceContractAssignments.length > 0)\n    .slice(0, 5)\n    .map(m => ({\n      id: m.id,\n      serialNumber: m.serialNumber,\n      model: `${m.machineModel?.brand || ''} ${m.machineModel?.modelName || ''}`.trim(),\n      contractCount: m.serviceContractAssignments.length\n    }));\n  \n  // Newest machines (recent additions)\n  performers.newestMachines = machines\n    .filter(m => m.status === 'NEW')\n    .slice(0, 5)\n    .map(m => ({\n      id: m.id,\n      serialNumber: m.serialNumber,\n      model: `${m.machineModel?.brand || ''} ${m.machineModel?.modelName || ''}`.trim(),\n      customer: m.customer?.name\n    }));\n  \n  return performers;\n}\n\n// Generate executive summary\nfunction generateExecutiveSummary(stats, role) {\n  return {\n    totalMachines: stats.totalMachines,\n    iotConnectionRate: `${stats.iotConnectivity.connectionRate}%`,\n    serviceContractCoverage: `${stats.serviceContractCoverage.coverageRate}%`,\n    topTechnology: Object.entries(stats.technologyDistribution)\n      .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Unknown',\n    topBrand: Object.entries(stats.brandDistribution)\n      .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Unknown',\n    activeWarranties: stats.warrantyStatus.activeWarranty,\n    userRole: role\n  };\n}\n\n// Compile comprehensive analysis\nconst portfolioStats = calculatePortfolioStats(customerMachines, assets);\nconst roleInsights = generateRoleInsights(portfolioStats, userRole);\nconst recommendations = generateRecommendations(portfolioStats, userRole);\nconst topPerformers = identifyTopPerformers(customerMachines);\nconst executiveSummary = generateExecutiveSummary(portfolioStats, userRole);\n\nconst result = {\n  executiveSummary,\n  portfolioStats,\n  roleInsights,\n  recommendations,\n  topPerformers,\n  \n  // Analysis metadata\n  analysis: {\n    analyzedAt: new Date().toISOString(),\n    userRole: userRole,\n    machineCount: customerMachines.length,\n    assetCount: assets.length,\n    analysisType: 'comprehensive_portfolio'\n  },\n  \n  metadata: {\n    generatedAt: new Date().toISOString(),\n    analysisScope: 'machine_portfolio',\n    roleContext: userRole\n  }\n};\n\nreturn result;"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        -1136,
        128
      ],
      "id": "analyzeMachinePortfolio-tool-id",
      "name": "analyzeMachinePortfolio",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    }
  ],
  "connections": {
    "analyzeMachinePortfolio": {
      "ai_tool": [
        []
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "90f7e16e88b8af51a9fefb468989df8864c6fa45b8b0deeeccb82ce7f608fa65"
  }
}