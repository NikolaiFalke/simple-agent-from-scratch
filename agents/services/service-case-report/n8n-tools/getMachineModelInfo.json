{
  "nodes": [
    {
      "parameters": {
        "description": "Extracts machine model information and technical context from service case snapshots. Provides machine specifications, technology details, and technical context for case analysis. Uses snapshot data for service independence until machine service integration is available.",
        "jsCode": "// Machine Model Information Extraction\n// Extracts technical context from service case machine snapshots\n\nconst caseData = $input.first().json.caseData;\nconst includeDocumentation = $input.first().json.includeDocumentation || false;\n\nif (!caseData) {\n  return { error: 'Case data is required for machine model analysis' };\n}\n\nconst machineSnapshot = caseData.serviceCaseMachineSnapshot;\nconst customerMachineSnapshot = caseData.serviceCaseCustomerMachineSnapshot;\n\nif (!machineSnapshot && !customerMachineSnapshot) {\n  return { error: 'No machine information available in case snapshots' };\n}\n\n// Extract machine model information\nfunction extractMachineInfo(machineSnapshot, customerMachineSnapshot) {\n  const machineInfo = {\n    // Basic machine details\n    modelName: machineSnapshot?.modelName || 'Unknown Model',\n    brand: machineSnapshot?.brand || 'Unknown Brand',\n    technology: machineSnapshot?.technology || 'Unknown Technology',\n    serialNumber: machineSnapshot?.serialNumber || 'Not Available',\n    \n    // Customer context\n    customer: customerMachineSnapshot?.customer?.name || 'Unknown Customer',\n    customerId: customerMachineSnapshot?.customer?.id,\n    machineModelId: customerMachineSnapshot?.machineModelId,\n    \n    // IoT/Connectivity\n    hasIoTDevice: !!machineSnapshot?.edgeDevice,\n    iotDeviceId: machineSnapshot?.edgeDevice?.iotDeviceId,\n    \n    // Snapshot metadata\n    snapshotId: machineSnapshot?.id,\n    customerSnapshotId: customerMachineSnapshot?.id,\n    tenantId: customerMachineSnapshot?.tenant?.id\n  };\n  \n  return machineInfo;\n}\n\n// Generate technical specifications summary\nfunction generateTechnicalSummary(machineInfo) {\n  const specs = [];\n  \n  specs.push(`**Model**: ${machineInfo.brand} ${machineInfo.modelName}`);\n  specs.push(`**Technology**: ${machineInfo.technology}`);\n  specs.push(`**Serial Number**: ${machineInfo.serialNumber}`);\n  \n  if (machineInfo.hasIoTDevice) {\n    specs.push(`**IoT Device**: Connected (${machineInfo.iotDeviceId})`);\n  } else {\n    specs.push(`**IoT Device**: Not connected`);\n  }\n  \n  return specs;\n}\n\n// Analyze machine reliability context\nfunction analyzeMachineContext(machineInfo, caseData) {\n  const context = {\n    machineAge: 'Unknown', // Would need machine service integration\n    installationDate: 'Unknown', // Would need machine service integration\n    serviceHistory: 'Limited to current case', // Current limitation\n    \n    // Available context from case\n    currentIssue: {\n      severity: caseData.severity,\n      priority: caseData.priority,\n      description: caseData.description,\n      title: caseData.title\n    },\n    \n    // Service context\n    serviceProvider: caseData.serviceCaseServiceOrganisationSnapshot?.name,\n    customer: machineInfo.customer,\n    \n    // Connectivity status\n    remoteAccessCapable: machineInfo.hasIoTDevice,\n    monitoringEnabled: machineInfo.hasIoTDevice\n  };\n  \n  return context;\n}\n\n// Generate machine-specific insights\nfunction generateMachineInsights(machineInfo, caseData) {\n  const insights = [];\n  \n  // Technology-specific insights\n  switch (machineInfo.technology?.toLowerCase()) {\n    case 'edm':\n      insights.push('EDM (Electrical Discharge Machining) - Precision manufacturing equipment');\n      insights.push('Common issues: Electrode wear, power fluctuations, coolant system problems');\n      break;\n    case 'fully automatic coffee machine':\n      insights.push('Consumer appliance - Focus on user experience and reliability');\n      insights.push('Common issues: Water system, grinding mechanism, heating elements');\n      break;\n    default:\n      insights.push(`${machineInfo.technology} - Industrial equipment`);\n      insights.push('Consider technology-specific maintenance requirements');\n  }\n  \n  // Connectivity insights\n  if (machineInfo.hasIoTDevice) {\n    insights.push('‚úÖ IoT-enabled: Remote monitoring and diagnostics available');\n    insights.push('Consider remote troubleshooting options');\n  } else {\n    insights.push('‚ö†Ô∏è Not IoT-enabled: On-site diagnosis required');\n    insights.push('Consider IoT upgrade for enhanced service capabilities');\n  }\n  \n  // Service delivery insights\n  if (caseData.severity === 'MACHINE_BREAKDOWN') {\n    insights.push('üö® Critical: Machine completely non-functional - immediate attention required');\n  } else if (caseData.severity === 'PRODUCTION_IMPAIRED') {\n    insights.push('‚ö†Ô∏è Production Impact: Efficiency reduced - schedule urgent service');\n  }\n  \n  return insights;\n}\n\n// Future integration placeholders\nfunction prepareFutureIntegration(machineInfo) {\n  return {\n    machineServiceIntegration: {\n      status: 'Not Available',\n      plannedFeatures: [\n        'Complete machine lifecycle data',\n        'Maintenance history and schedules',\n        'Performance metrics and trends',\n        'Spare parts information',\n        'Technical documentation library',\n        'Manufacturer support resources'\n      ],\n      currentLimitations: [\n        'Limited to snapshot data from case creation',\n        'No real-time machine status',\n        'No historical performance data',\n        'No maintenance schedule information'\n      ]\n    },\n    \n    documentationService: {\n      status: 'Placeholder',\n      futureCapabilities: [\n        'Machine model documentation lookup',\n        'Troubleshooting guides',\n        'Technical specifications',\n        'Maintenance procedures',\n        'Parts catalogs'\n      ]\n    },\n    \n    assetService: {\n      status: 'Placeholder',\n      futureCapabilities: [\n        'Asset lifecycle tracking',\n        'Installation and commissioning history',\n        'Warranty and service contract information',\n        'Performance analytics'\n      ]\n    }\n  };\n}\n\n// Compile machine information\nconst machineInfo = extractMachineInfo(machineSnapshot, customerMachineSnapshot);\nconst technicalSummary = generateTechnicalSummary(machineInfo);\nconst machineContext = analyzeMachineContext(machineInfo, caseData);\nconst insights = generateMachineInsights(machineInfo, caseData);\nconst futureIntegration = prepareFutureIntegration(machineInfo);\n\n// Generate recommendations based on available data\nconst recommendations = [\n  'Use findSimilarCases tool to identify machine model patterns',\n  'Review case resolution history for this machine type',\n  'Consider technology-specific troubleshooting approaches'\n];\n\nif (machineInfo.hasIoTDevice) {\n  recommendations.push('Leverage IoT connectivity for remote diagnostics');\n} else {\n  recommendations.push('Plan on-site diagnosis and repair approach');\n}\n\nif (machineInfo.machineModelId) {\n  recommendations.push('Track machine model ID for future service integration');\n}\n\nconst result = {\n  machineInfo,\n  technicalSummary,\n  machineContext,\n  insights,\n  recommendations,\n  futureIntegration,\n  \n  // Analysis metadata\n  analysis: {\n    dataSource: 'Service Case Snapshots',\n    limitationsApply: true,\n    dataFreshness: 'Snapshot from case creation time',\n    enhancementAvailable: 'With future machine service integration'\n  },\n  \n  metadata: {\n    analyzedAt: new Date().toISOString(),\n    caseDisplayId: caseData.displayId,\n    snapshotBased: true,\n    futureIntegrationReady: true\n  }\n};\n\nreturn result;"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        -1136,
        128
      ],
      "id": "getMachineModelInfo-tool-id",
      "name": "getMachineModelInfo",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    }
  ],
  "connections": {
    "getMachineModelInfo": {
      "ai_tool": [
        []
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "90f7e16e88b8af51a9fefb468989df8864c6fa45b8b0deeeccb82ce7f608fa65"
  }
}